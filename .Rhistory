library(shiny)
ui <- fluidPage(
textInput("input_value", "Enter Value:", ""),
downloadButton("download_html", "Download HTML")
)
server <- function(input, output, session) {
# Conditional logic for download
output$download_html <- downloadHandler(
filename = function() {
"output.html"
},
content = function(file) {
# Check the condition
if (input$input_value == "") {
showNotification("Please enter a value before downloading!", type = "error")
return(NULL) # Prevent file creation
}
# Create the HTML content
write("<h1>Your Downloaded HTML Content</h1>", file)
}
)
}
shinyApp(ui, server)
library(shiny)
library(shinyjs) # For controlling UI elements dynamically
ui <- fluidPage(
useShinyjs(), # Initialize shinyjs
textInput("input_value", "Enter Value:", ""),
downloadButton("download_html", "Download HTML")
)
server <- function(input, output, session) {
observe({
# Disable the button if input_value is empty
if (input$input_value == "") {
shinyjs::disable("download_html")
} else {
shinyjs::enable("download_html")
}
})
output$download_html <- downloadHandler(
filename = function() {
"output.html"
},
content = function(file) {
# Write HTML content to the file
write("<h1>Your Downloaded HTML Content</h1>", file)
}
)
}
shinyApp(ui, server)
